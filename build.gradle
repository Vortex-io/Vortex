// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.50'
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url "https://maven.google.com" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.dcendents:android-maven-gradle-plugin:1.4.1"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
        classpath "io.freefair.gradle:github-plugin:4.1.1"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url "https://maven.google.com" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

ext {
    LibraryGroup = "io.vortex"
    LibraryVersion = "1.0.8"

    PackagingType = "arr"
    LibraryName = "Vortex"
    GithubUrl = "https://github.com/Vortex-io/Vortex"
    GitUrl = "https://github.com/Vortex-io/Vortex.git"
    licenseName = "Apache-2.0"
    licenseUrl = "http://www.apache.org/licenses/LICENSE-2.0"
    distribution = 'repo'
    GithubIssuesUrl = "https://github.com/Vortex-io/Vortex/issues"
    DeveloperID = "yt98"
    DeveloperName = "Yazan Tarifi"
    DeveloperEmail = ""
    Description = "Architecture To Build Android Applications"


    BintrayUsername = "yt98"
    BintrayApiKey = ""
}

subprojects {

    if (!project.name.equals("vortex-sample")) {
        apply plugin: 'com.android.library'
        apply plugin: 'kotlin-android'
        apply plugin: 'kotlin-android-extensions'
        apply plugin: 'com.jfrog.bintray'
        apply plugin: 'maven-publish'
        apply plugin: 'com.github.dcendents.android-maven'

        android {
            compileSdkVersion 29
            defaultConfig {
                minSdkVersion 21
                targetSdkVersion 29
                versionCode 1
                versionName "1.0"
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            }

            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                }
            }

            lintOptions {
                abortOnError false
            }

            kotlinOptions {
                jvmTarget = "1.8"
            }
        }

        dependencies {
            implementation "io.reactivex.rxjava2:rxjava:2.2.12"
            implementation "io.reactivex.rxjava2:rxandroid:2.1.1"

            implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.1'
            implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.1'

            implementation fileTree(dir: 'libs', include: ['*.jar'])
            implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
            implementation 'androidx.appcompat:appcompat:1.1.0'
            implementation 'androidx.core:core-ktx:1.1.0'
            testImplementation 'junit:junit:4.12'
            androidTestImplementation 'androidx.test.ext:junit:1.1.1'
            androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

            if (!project.name.equals("vortex")) {
                implementation project(":vortex")
            }
        }

        task sourcesJar(type: Jar) {
            from android.sourceSets.main.java.srcDirs
            classifier = 'sources'
        }

        task javadoc(type: Javadoc) {
            source = android.sourceSets.main.java.srcDirs
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            archives sourcesJar
        }

    group = rootProject.ext.LibraryGroup
    version = rootProject.ext.LibraryVersion
    }
}

group = rootProject.ext.LibraryGroup
version = rootProject.ext.LibraryVersion

task clean(type: Delete) {
    delete rootProject.buildDir
}